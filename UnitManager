using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEngine;

public class UnitManager : MonoBehaviour
{
    public static UnitManager Instance;

    private List<ScriptableUnit> _units;
    public BaseHero SelectedHero;

    public int nextEnemyID = 0;

    void Awake()
    {
        Instance = this;

        _units = Resources.LoadAll<ScriptableUnit>("Units").ToList();
    }

    public void SpawnHeroes()
    {
        var heroCount = 1;

        for (int i = 0; i < heroCount; i++)
        {
            var orderedHeroPrefab = GetUnitByOrder<BaseHero>(Faction.Hero, i);
            if (orderedHeroPrefab != null)
            {
                var spawnedHero = Instantiate(orderedHeroPrefab);
                var spawnTile = GridManager.Instance.GetHeroSpawnTile();

                if (spawnTile != null)
                {
                    spawnTile.SetUnit(spawnedHero);
                }
                else
                {
                    Debug.LogError("No valid spawn tile found for hero.");
                }
            }
        }

        GameManager.Instance.ChangeState(GameState.SpawnEnemies);
    }

    public void SpawnEnemies()
    {
        var enemyCount = 2;

        for (int i = 0; i < enemyCount; i++)
        {
            var orderedEnemyPrefab = GetUnitByOrder<BaseEnemy>(Faction.Enemy, i);
            if (orderedEnemyPrefab != null)
            {
                var spawnedEnemy = Instantiate(orderedEnemyPrefab);
                var spawnTile = GridManager.Instance.GetEnemySpawnTile(spawnedEnemy);

                if (spawnTile != null)
                {
                    spawnTile.SetUnit(spawnedEnemy);
                }
                else
                {
                    Debug.LogError("No valid spawn tile found for enemy.");
                }
            }
        }

        GameManager.Instance.ChangeState(GameState.HeroesTurn);
    }

    private T GetUnitByOrder<T>(Faction faction, int order) where T : BaseUnit
    {
        var unitList = _units.Where(u => u.Faction == faction)
                             .OrderBy(u => u.UnitOrder)
                             .Distinct()
                             .ToList();

        // Ensure the order is within the range of the list
        if (order >= 0 && order < unitList.Count)
        {
            return (T)unitList[order].UnitPrefab;
        }

        // Handle cases where the order is out of range
        Debug.LogError($"No unit found for order {order}");
        return null;
    }



    //public void SetSelectedHero(BaseHero hero)
    //{
    //    SelectedHero = hero;
    //    MenuManager.Instance.ShowSelectedHero(hero);
    //}
}
