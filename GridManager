using System.Collections.Generic;
using UnityEngine;
using System.Linq;

public class GridManager : MonoBehaviour
{
    public static GridManager Instance;
    [SerializeField] private int _width, _height;

    [SerializeField] private Tile _grassTile, _mountainTile, _returnTile, _slipTile;

    [SerializeField] private Transform _cam;

    private Dictionary<Vector2, Tile> _tiles;
    static List<Vector2Int> returnTileCoordinates = new List<Vector2Int>();

    void Awake()
    {
        if (Instance == null)
        {
            Instance = this;
        }
        else if (Instance != this)
        {
            Destroy(gameObject);
        }
    }

    public void GenerateGrid()
    {
        _tiles = new Dictionary<Vector2, Tile>();

        int Level = 10;
        int[,,] tileCoords = new int[Level, _width, _height];

        SetTo1(tileCoords);

        Level = 1;
        for (int x = 0; x < _width; x++)
        {
            for (int y = 0; y < _height; y++)
            {
                Tile placeTile;

                switch (tileCoords[Level, x, y])
                {
                    case 1:
                        placeTile = _mountainTile;
                        break;
                    case 2:
                        placeTile = _returnTile;
                        break;
                    case 3:
                        placeTile = _slipTile;
                        break;
                    //New tile cases go here

                    default:
                        placeTile = _grassTile;
                        break;
                }

                if (placeTile == null)
                {
                    Debug.LogError($"placeTile is null for coordinates ({x}, {y}) with tile type {tileCoords[Level, x, y]}");
                    continue;
                }

                var spawnedTile = Instantiate(placeTile, new Vector3(x, y), Quaternion.identity);

                spawnedTile.name = $"Tile {x} {y}";

                spawnedTile.Init(x, y);

                if (tileCoords[Level, x, y] == 2)
                {
                    spawnedTile.gameObject.tag = "ReturnTile";
                }

                _tiles[new Vector2(x, y)] = spawnedTile;
            }
        }

        _cam.transform.position = new Vector3((float)_width / 2 - 0.5f, (float)_height / 2 - 0.5f, -10);

        GameManager.Instance.ChangeState(GameState.SpawnHeroes);
    }

    static void SetTo1(int[,,] array)
    {
        TextAsset file = Resources.Load<TextAsset>("ReadCords1");
        if (file == null)
        {
            Debug.LogError("Failed to load file ReadCords1.");
            return;
        }

        string[] lines = file.text.Split('\n');
        foreach (string line in lines)
        {
            string[] parts = line.Trim().Split(',');
            if (parts.Length == 4 &&
                int.TryParse(parts[0], out int level) &&
                int.TryParse(parts[1], out int x) &&
                int.TryParse(parts[2], out int y) &&
                int.TryParse(parts[3], out int type) &&
                level == 1)
            {
                array[level, x, y] = type;
                //Debug.Log($"Set tileCoords[{level}, {x}, {y}] = {type}");
            }
        }
    }

    public Tile GetHeroSpawnTile()
    {
        return _tiles.Where(t => t.Key.x == 12 && t.Key.y == 1).OrderBy(t => Random.value).First().Value;
    }

    public Tile GetEnemySpawnTile()
    {
        //return _tiles.Where(t => t.Key.x > _width / 2 && t.Value.Walkable).OrderBy(t => Random.value).First().Value;
        //as its currently one enemy this coord is where the bag is spawned (Bag is a place holder enemy)
        return _tiles.FirstOrDefault(t => t.Key.x == 9 && t.Key.y == 1).Value;
    }

    public Tile GetTileAtPosition(Vector2 pos)
    {
        return _tiles.TryGetValue(pos, out var tile) ? tile : null;
    }
}
