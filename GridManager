using System;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using Random = UnityEngine.Random;

public class GridManager : MonoBehaviour
{
    public static GridManager Instance;
    [SerializeField] private int _width, _height;

    [SerializeField] private Tile _grassTile, _mountainTile, _returnTile, _slipTile;

    [SerializeField] private Transform _cam;

    private Dictionary<Vector2, Tile> _tiles;
    static List<Vector2Int> returnTileCoordinates = new List<Vector2Int>();

    void Awake()
    {
        Instance = this;
    }

    public void GenerateGrid()
    {
        _tiles = new Dictionary<Vector2, Tile>();
        int Level = 10;
        int[,,] tileCoords = new int[Level, _width, _height];

        SetTo1(tileCoords);

        SetTo2(tileCoords, 1, 10, 5);

        SetTo3(tileCoords, 1, 5, 10);

        Level = 1;
        for (int x = 0; x < _width; x++)
        {
            for (int y = 0; y < _height; y++)
            {
                //var placeTile = tileCoords[Level, x, y] == 1 ? _mountainTile : _grassTile;
                Tile placeTile;

                switch (tileCoords[Level, x, y])
                {
                    case 1:
                        placeTile = _mountainTile;
                        break;

                    case 2:
                        placeTile = _returnTile;
                        break;

                    case 3:
                        placeTile = _slipTile;
                        break;
                    //New tile cases go here

                    default:
                        placeTile = _grassTile;
                        break;
                }

                var spawnedTile = Instantiate(placeTile, new Vector3(x, y), Quaternion.identity);

                spawnedTile.name = $"Tile {x} {y}";

                spawnedTile.Init(x, y);

                // Tag return tiles
                if (tileCoords[Level, x, y] == 2)
                {
                    spawnedTile.gameObject.tag = "ReturnTile";
                }

                _tiles[new Vector2(x, y)] = spawnedTile;
            }
        }

        _cam.transform.position = new Vector3((float)_width / 2 - 0.5f, (float)_height / 2 - 0.5f, -10);

        GameManager.Instance.ChangeState(GameState.SpawnHeroes);
    }

    static void SetTo1(int[,,] array) //Set appropriate coords to an I.D. of 1
    {
        TextAsset file = Resources.Load<TextAsset>("ReadCords1");
        string content = file.text;

        if (file != null)
        {
            string[] lines = file.text.Split('\n'); // Split the file content into lines
            foreach (string line in lines)
            {
                // Parse the coordinates from the current line
                string[] parts = line.Trim().Split(','); // Trim whitespace and split by comma
                if (parts.Length == 4)
                {
                    int level, x, y, type;
                    if (int.TryParse(parts[0], out level) && int.TryParse(parts[1], out x) && int.TryParse(parts[2], out y) && int.TryParse(parts[3], out type))
                    {
                        // Check if the coordinate should be added if the level is 1
                        if (level == 1)
                        {
                            array[level, x, y] = type;
                            //Debug.Log("Coordinates set for level " + level+ " of type " + type + " at index [" + x + ", " + y + "]");
                            if (type == 2)
                            {
                                returnTileCoordinates.Add(new Vector2Int(x, y));
                            }
                        }
                        else
                        {
                            //Debug.Log("Skipping coordinate " + line);
                        }
                    }
                    else
                    {
                        //Debug.LogError("Failed to parse coordinates in line: " + line);
                    }
                }
                else
                {
                    //Debug.LogError("Invalid coordinate format in line: " + line);
                }
            }
        }
        else
        {
            Debug.LogError("Failed to load file.");
        }

    }

    static void SetTo2(int[,,] array, int Level, int x, int y)
    {
        //array[Level, x, y] = 2;
    }

    static void SetTo3(int[,,] array, int Level, int x, int y)
    {
        //array[Level, x, y] = 3;
    }

    public Tile GetHeroSpawnTile()
    {
        //return _tiles.Where(t => t.Key.x < _width / 2 && t.Value.Walkable).OrderBy(t => Random.value).First().Value;
        return _tiles.Where(t => t.Key.x == 9 && t.Key.y == 9).OrderBy(t => Random.value).First().Value;
    }

    public Tile GetEnemySpawnTile()
    {
        return _tiles.Where(t => t.Key.x > _width / 2 && t.Value.Walkable).OrderBy(t => Random.value).First().Value;
    }

    public Tile GetTileAtPosition(Vector2 pos)
    {
        if (_tiles.TryGetValue(pos, out var tile)) return tile;
        return null;
    }
}
