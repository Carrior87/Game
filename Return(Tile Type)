using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Return : Tile
{
    public GameObject player;
    int tileHeight = 1;
    int tileWidth = 1;
    private bool reNull = true;

    void Start()
    {
        player = GameObject.FindWithTag("Player");
        Debug.Log($"Player: {player}");
        if (player == null)
        {
            Debug.LogError("Player GameObject not found!");
        }
    }

    void Update()
    {
        if (IsPlayerOnTile()&& reNull)
        {
            Debug.Log("Player is on the return tile!");// activate whatever its supposed to do
            MenuManager.Instance.showAcceptMenu(IsPlayerOnTile());// menu hasnt been made yet or added to menu manager
            reNull = false;
        }
    }

    bool IsPlayerOnTile()
    {
        if (player == null)
        {
            Debug.LogError("Player GameObject is null!");
            return false;
        }

        Vector3 playerPos = player.transform.position;
        Vector3 returnTilePos = transform.position;

        // Check if the player's position is within a small distance of the return tile or its neighbor
        float distanceThreshold = 0.1f; // Adjust this threshold as needed
        if (Vector3.Distance(playerPos, returnTilePos) < distanceThreshold)
        {
            return true;
        }

        // Check if the player's position is within a small distance of the neighboring tile
        Vector3 rightTilePos = returnTilePos + new Vector3(tileWidth, 0, 0);
        Vector3 leftTilePos = returnTilePos - new Vector3(tileWidth, 0, 0);
        Vector3 upTilePos = returnTilePos + new Vector3(0, tileHeight, 0);
        Vector3 downTilePos = returnTilePos - new Vector3(0, tileHeight, 0);

        if (Vector3.Distance(playerPos, rightTilePos) < distanceThreshold || Vector3.Distance(playerPos, leftTilePos) < distanceThreshold|| Vector3.Distance(playerPos, upTilePos) < distanceThreshold|| Vector3.Distance(playerPos, downTilePos) < distanceThreshold)
        {
            return true;
        }

        reNull = true;
        return false;
    }
}
