using UnityEngine;

public class Return : Tile
{
    private GameObject player;
    int tileHeight = 1;
    int tileWidth = 1;
    private float distanceThreshold = 0.5f; // Adjust based on your game's needs

    void Start()
    {
        player = GameObject.FindWithTag("Player");
        if (player == null)
        {
            Debug.LogError("Player GameObject not found!");
        }
    }

    void Update()
    {
        bool isPlayerOnTile = IsPlayerOnTile();
        MenuManager.Instance.showAcceptMenu(isPlayerOnTile);
    }

    bool IsPlayerOnTile()
    {
        if (player == null)
        {
            Debug.LogError("Player GameObject is null!");
            return false;
        }

        Vector3 playerPos = player.transform.position;

        // Find all game objects with the "ReturnTile" tag
        GameObject[] returnTiles = GameObject.FindGameObjectsWithTag("ReturnTile");

        foreach (GameObject returnTile in returnTiles)
        {
            Vector3 returnTilePos = returnTile.transform.position;

            // Check if the player's position is within a small distance of the neighboring tile
            Vector3 rightTilePos = returnTilePos + new Vector3(tileWidth, 0, 0);
            Vector3 leftTilePos = returnTilePos - new Vector3(tileWidth, 0, 0);
            Vector3 upTilePos = returnTilePos + new Vector3(0, tileHeight, 0);
            Vector3 downTilePos = returnTilePos - new Vector3(0, tileHeight, 0);

            // Check if the player is close enough to this return tile
            if (Vector3.Distance(playerPos, rightTilePos) < distanceThreshold ||
            Vector3.Distance(playerPos, leftTilePos) < distanceThreshold ||
            Vector3.Distance(playerPos, upTilePos) < distanceThreshold ||
            Vector3.Distance(playerPos, downTilePos) < distanceThreshold)
            {
                return true;
            }

        }

        return false;
    }
}
