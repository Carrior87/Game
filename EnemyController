using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemyController : MonoBehaviour
{
    public static EnemyController Instance;

    public float moveSpeed = 5f;
    public Transform EmovePoint;
    private bool isMoving = false;
    private Vector3 previousPosition;

    public LayerMask whatStopsMovement;

    public GameObject[] enemyPrefabs;
    //make prefabs located at the coords these enemies are going to be spawned at. or just hard code it. its like 1-3 FOE's per level so its not gonna be 'that' bad
    public Transform[] spawnPoints;

    private int currentGoalIndex = 0;

    void Start()
    {
        //Bag = GameObject.FindWithTag("Enemy");
        EmovePoint.position = new Vector3(12, 1, 0);
        //EmovePoint.parent = null;
        EmovePoint.position = transform.position;
        previousPosition = transform.position;
    }

    void Update()
    {
        if (GameManager.Instance.IsEnemyTurn() && !isMoving)
        {
            isMoving = true;
            StartCoroutine(MoveEnemyTowardsGoal());
        }
    }

    IEnumerator MoveEnemyTowardsGoal()
    {
        yield return new WaitForSeconds(0.01f);

        Vector3 goalPosition = Enemy1.goalPositions[currentGoalIndex];
        Vector3 direction = (goalPosition - EmovePoint.position).normalized;

        // Determine the next step towards the goal position
        float horizontalInput = 0f;
        float verticalInput = 0f;

        if (Mathf.Abs(direction.x) > Mathf.Abs(direction.y))
        {
            horizontalInput = direction.x > 0 ? 1f : -1f;
        }
        else
        {
            verticalInput = direction.y > 0 ? 1f : -1f;
        }

        Vector3 targetPosition = EmovePoint.position + new Vector3(horizontalInput, verticalInput, 0f);

        RaycastHit2D hit = Physics2D.Linecast(EmovePoint.position, targetPosition, whatStopsMovement);
        if (hit.collider == null)
        {
            yield return new WaitForSeconds(0.01f);

            while (Vector3.Distance(transform.position, targetPosition) > .05f)
            {
                transform.position = Vector3.MoveTowards(transform.position, targetPosition, moveSpeed * Time.deltaTime);
                yield return null;
            }

            EmovePoint.position = targetPosition;

            // Check if the enemy has reached the goal position
            if (Vector3.Distance(EmovePoint.position, goalPosition) < 0.1f)
            {
                currentGoalIndex = (currentGoalIndex + 1) % Enemy1.goalPositions.Count;
            }
        }

        isMoving = false;
        GameManager.Instance.EndEnemyTurn();
    }

    //public void EnemyTurn()
    //{
    //    // Add any logic needed at the start of the enemy's turn here
    //    GameManager.Instance.EndEnemyTurn();
    //}
}
