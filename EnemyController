using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemyController : MonoBehaviour
{
    public static EnemyController Instance;

    public float moveSpeed = 5f;
    public Transform EmovePoint;
    private bool isMoving = false;
    private Vector3 previousPosition;

    public LayerMask whatStopsMovement;

    public List<Vector3> goalPositions;
    private int currentGoalIndex = 0;

    void Start()
    {
        EmovePoint.parent = null;
        EmovePoint.position = transform.position;
        previousPosition = transform.position;

        // Initialize the list of goal positions
        goalPositions = new List<Vector3>
        {
            new Vector3(10, 10, 0), // First goal position
            new Vector3(5, 5, 0),   // Second goal position
            new Vector3(0, 0, 0)    // Third goal position
        };
    }

    void Update()
    {
        if (GameManager.Instance.IsEnemyTurn() && !isMoving)
        {
            isMoving = true;
            StartCoroutine(MoveEnemyTowardsGoal());
        }
    }

    IEnumerator MoveEnemyTowardsGoal()
    {
        yield return new WaitForSeconds(0.01f);

        if (currentGoalIndex >= goalPositions.Count)
        {
            // All goals have been reached
            isMoving = false;
            GameManager.Instance.EndEnemyTurn();
            yield break;
        }

        Vector3 goalPosition = goalPositions[currentGoalIndex];
        Vector3 direction = (goalPosition - EmovePoint.position).normalized;
        float horizontalInput = Mathf.Round(direction.x);
        float verticalInput = Mathf.Round(direction.y);

        Vector3 targetPosition = EmovePoint.position + new Vector3(horizontalInput, verticalInput, 0f);

        RaycastHit2D hit = Physics2D.Linecast(EmovePoint.position, targetPosition, whatStopsMovement);
        if (hit.collider == null)
        {
            yield return new WaitForSeconds(0.01f);

            while (Vector3.Distance(transform.position, targetPosition) > .05f)
            {
                transform.position = Vector3.MoveTowards(transform.position, targetPosition, moveSpeed * Time.deltaTime);
                yield return null;
            }

            EmovePoint.position = targetPosition;
        }

        // Check if the enemy has reached the current goal
        if (Vector3.Distance(EmovePoint.position, goalPosition) < 0.1f)
        {
            currentGoalIndex++;
        }

        isMoving = false;
        GameManager.Instance.EndEnemyTurn();
    }
}
