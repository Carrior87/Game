using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class EnemyController : MonoBehaviour
{
    public static EnemyController Instance;

    private BaseEnemy enemyLocation;

    public float moveSpeed = 5f;
    private Transform EmovePoint;
    private bool isMoving = false;
    private Vector3 previousPosition;

    public LayerMask whatStopsMovement;

    public GameObject[] enemyPrefabs;

    private int currentGoalIndex = 0;

    void Start()
    {
        // Create a unique EmovePoint for this enemy
        EmovePoint = new GameObject("EmovePoint").transform;
        EmovePoint.position = transform.position;

        previousPosition = transform.position;

        enemyLocation = GetComponent<BaseEnemy>();

        if (enemyLocation != null)
        {
            Debug.Log("X: " + enemyLocation.X);
            Debug.Log("Y: " + enemyLocation.Y);
            Debug.Log("Level: " + enemyLocation.Level);
        }
    }

    void Update()
    {
        if (GameManager.Instance.IsEnemyTurn() && !isMoving)
        {
            isMoving = true;
            StartCoroutine(MoveEnemyTowardsGoal());
        }
    }

    IEnumerator MoveEnemyTowardsGoal()
    {
        yield return new WaitForSeconds(0.01f);

        Vector3 goalPosition = enemyLocation.goalPositions[currentGoalIndex];
        Vector3 direction = (goalPosition - EmovePoint.position).normalized;

        float horizontalInput = 0f;
        float verticalInput = 0f;

        if (Mathf.Abs(direction.x) > Mathf.Abs(direction.y))
        {
            horizontalInput = direction.x > 0 ? 1f : -1f;
        }
        else
        {
            verticalInput = direction.y > 0 ? 1f : -1f;
        }

        Vector3 targetPosition = EmovePoint.position + new Vector3(horizontalInput, verticalInput, 0f);

        RaycastHit2D hit = Physics2D.Linecast(EmovePoint.position, targetPosition, whatStopsMovement);
        if (hit.collider == null)
        {
            yield return new WaitForSeconds(0.01f);

            while (Vector3.Distance(transform.position, targetPosition) > .05f)
            {
                transform.position = Vector3.MoveTowards(transform.position, targetPosition, moveSpeed * Time.deltaTime);
                yield return null;
            }

            EmovePoint.position = targetPosition;

            if (Vector3.Distance(EmovePoint.position, goalPosition) < 0.1f)
            {
                currentGoalIndex = (currentGoalIndex + 1) % enemyLocation.goalPositions.Count;
            }
        }

        isMoving = false;
        GameManager.Instance.EndEnemyTurn();
    }
}
